python module pyfboxlib

    interface
!    -*- f90 -*-
! Note: the context of this file is case sensitive.

module fboxlib ! in fboxlib.f90
    use blobjects
    subroutine hello ! in fboxlib.f90:fboxlib
    end subroutine hello
    subroutine open ! in fboxlib.f90:fboxlib
        use parallel
    end subroutine open
    subroutine close ! in fboxlib.f90:fboxlib
        use parallel
    end subroutine close
    subroutine create_layout_from_boxes(boxes,nboxes,dim,oid) ! in fboxlib.f90:fboxlib
        integer dimension(nboxes,2,dim),intent(in) :: boxes
        integer optional,intent(in),check(shape(boxes,0)==nboxes),depend(boxes) :: nboxes=shape(boxes,0)
        integer optional,intent(in),check(shape(boxes,2)==dim),depend(boxes) :: dim=shape(boxes,2)
        integer intent(out) :: oid
    end subroutine create_layout_from_boxes
    subroutine print_layout(oid) ! in fboxlib.f90:fboxlib
        integer intent(in) :: oid
    end subroutine print_layout
    subroutine create_multifab_from_boxes(nc,ng,boxes,nboxes,dim,oid) ! in fboxlib.f90:fboxlib
        integer intent(in) :: nc
        integer intent(in) :: ng
        integer dimension(nboxes,2,dim),intent(in) :: boxes
        integer optional,intent(in),check(shape(boxes,0)==nboxes),depend(boxes) :: nboxes=shape(boxes,0)
        integer optional,intent(in),check(shape(boxes,2)==dim),depend(boxes) :: dim=shape(boxes,2)
        integer intent(out) :: oid
    end subroutine create_multifab_from_boxes
    subroutine print_multifab(oid) ! in fboxlib.f90:fboxlib
        integer intent(in) :: oid
    end subroutine print_multifab
    subroutine create_lmultifab_from_boxes(boxes,nboxes,dim,oid) ! in fboxlib.f90:fboxlib
        integer dimension(nboxes,2,dim),intent(in) :: boxes
        integer optional,intent(in),check(shape(boxes,0)==nboxes),depend(boxes) :: nboxes=shape(boxes,0)
        integer optional,intent(in),check(shape(boxes,2)==dim),depend(boxes) :: dim=shape(boxes,2)
        integer intent(out) :: oid
    end subroutine create_lmultifab_from_boxes
    subroutine print_lmultifab(oid) ! in fboxlib.f90:fboxlib
        integer intent(in) :: oid
    end subroutine print_lmultifab
    subroutine print_boxarray(oid) ! in fboxlib.f90:fboxlib
        integer intent(in) :: oid
    end subroutine print_boxarray
    subroutine regrid(tags_oid,buffer_width,boxes_oid) ! in fboxlib.f90:fboxlib
        use cluster_module
        integer intent(in) :: tags_oid
        integer intent(in) :: buffer_width
        integer intent(out) :: boxes_oid
    end subroutine regrid
end module fboxlib

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/

    end interface

  usercode '''
/*
 * BoxLib to NumPy routines
 *
 * This file gets inserted into the pyboxlib.pyf file at compile time.
 */

// fortran prototypes
void multifab_as_numpy_f(int *mfid, int *nbox, void *ptr, int *nx, int *ny, int *nz, int *nc);
void lmultifab_as_numpy_f(int *mfid, int *nbox, void *ptr, int *nx, int *ny, int *nz, int *nc);

/*
*/

PyObject *
multifab_as_numpy (PyObject * self, PyObject * args)
{
  int mfid, nbox, nx, ny, nz, nc;
  double *ptr;

  PyArrayObject *arr = NULL;
  int ndim = 4;
  npy_intp dims[4];

  if (!PyArg_ParseTuple (args, "ii", &mfid, &nbox))
    return NULL;

  multifab_as_numpy_f(&mfid, &nbox, &ptr, &nx, &ny, &nz, &nc);

  dims[0] = nx;
  dims[1] = ny;
  dims[2] = nz;
  dims[3] = nc;

  arr = PyArray_NewFromDescr(&PyArray_Type,
                             PyArray_DescrFromType(NPY_DOUBLE), ndim, dims, NULL,
                             ptr, NPY_FORTRAN|NPY_WRITEABLE, NULL);


  Py_INCREF(arr);
  return arr;
}

PyObject *
lmultifab_as_numpy (PyObject * self, PyObject * args)
{
  int mfid, nbox, nx, ny, nz, nc;
  double *ptr;

  PyArrayObject *arr = NULL;
  int ndim = 4;
  npy_intp dims[4];

  if (!PyArg_ParseTuple (args, "ii", &mfid, &nbox))
    return NULL;

  lmultifab_as_numpy_f(&mfid, &nbox, &ptr, &nx, &ny, &nz, &nc);

  dims[0] = nx;
  dims[1] = ny;
  dims[2] = nz;
  dims[3] = nc;

  arr = PyArray_NewFromDescr(&PyArray_Type,
                             PyArray_DescrFromType(NPY_INT), ndim, dims, NULL,
                             ptr, NPY_FORTRAN|NPY_WRITEABLE, NULL);


  Py_INCREF(arr);
  return arr;
}

  '''
  pymethoddef '''
{"multifab_array", multifab_as_numpy, METH_VARARGS, "Return NumPy array associated with a BoxLib multifab."},
{"lmultifab_array", lmultifab_as_numpy, METH_VARARGS, "Return NumPy array associated with a BoxLib lmultifab."},

  '''

end python module pyfboxlib
