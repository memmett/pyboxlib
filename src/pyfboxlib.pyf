python module pyfboxlib
    interface
        module fboxlib

            subroutine hello
            end subroutine hello

            subroutine open
            end subroutine open

            subroutine close
            end subroutine close

            ! subroutine set_comm(comm)
            !   integer intent(in) :: comm
            ! end subroutine set_comm

            subroutine initialize(nvar)
              integer(8) intent(out) :: nvar
            end subroutine initialize

        end module fboxlib
    end interface


  usercode '''
void fblarrayptr(int *mfid, int *nbox, void *ptr, int *nx, int *ny, int *nz, int *nc);

PyObject *
blarray_py (PyObject * self, PyObject * args)
{
  int mfid, nbox, nx, ny, nz, nc;
  double *ptr;

  PyArrayObject *arr = NULL;
  int ndim = 4;
  npy_intp dims[4];

  if (!PyArg_ParseTuple (args, "ii", &mfid, &nbox))
    return NULL;

  blarrayptr(&mfid, &nbox, &ptr, &nx, &ny, &nz, &nc);

  dims[0] = nx;
  dims[1] = ny;
  dims[2] = nz;
  dims[3] = nc;

  arr = PyArray_NewFromDescr(&PyArray_Type,
                             PyArray_DescrFromType(NPY_DOUBLE), ndim, dims, NULL,
                             ptr, NPY_FORTRAN|NPY_WRITEABLE, NULL);


  Py_INCREF(arr);
  return arr;
}
  '''

  pymethoddef '''
    {"blarray", blarray_py, METH_VARARGS, "Return NumPy array associated with a BoxLib multifab."},
  '''

end python module pyfboxlib
